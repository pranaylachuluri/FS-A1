/*
Jane gave her friend Martha two binary trees; she wants Martha to merge these 
two trees and return the merged tree in level-order traversal. She provides the 
merge rule that if two nodes of the binary tree overlap, then the sum of node 
values will be the new value of the merged node, else the node that is not null 
will be used as the value of the node in new tree. Given the roots of two 
Binary Trees, root1 and root2, Martha has to return the merged tree in 
level-order traversal.

Sample test case:
Input=1 3 2 5
2 1 3 -1 4 -1 7

      1                   2                          3
     / \                 /  \                       /   \
   3   2    +           1    3        =            4     5
  /                      \     \                 /  \      \
 5                       4     7                 5   4      7
      
Output=[3, 4, 5, 5, 4, 7]

Solution.java
/*
class TreeNode
{
    public int data;
    public TreeNode left, right;
    public TreeNode(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}
*/

import java.util.*;
class Solution
{
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2)
    {
        //Implement Your Code here
        if(t1==null) return t2;
        if(t2==null) return t1;
        t1.data+=t2.data;
        t1.left=mergeTrees(t1.left,t2.left);
        t1.right=mergeTrees(t1.right,t2.right);
        return t1;
    }
}