/*
Given the root of a Binary Tree, return the level-order traversal of the tree.

Sample test case:
Input=1 2 3 -1 5 -1 7

      1
     / \
    2   3
     \   \
      5   7
      
Output=[1, 2, 3, 5, 7]

Solution.java
*/
import java.util.*;
class TreeNode
{
    public int data;
    public TreeNode left, right;
    public TreeNode(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}


public class BFSlevelOder
{
    List<Integer> ans=new ArrayList<Integer>();
    public List<Integer> levelOrder(TreeNode root)
    {
        //Implement Your Code here
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        q.add(root);
        while(!q.isEmpty())
        {
            while(q.size()>0)
            {
                TreeNode curr=q.poll();
                ans.add(curr.data);
                if(curr.left!=null)
                {
                    q.add(curr.left);
                }
                if(curr.right!=null)
                {
                    q.add(curr.right);
                }
            }
        }
        return ans;
    }
}