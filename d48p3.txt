/*
Robin is given a grid of dimensions 9*9, the grid has integers or a dot ‘.’. 
Robin has to check if the grid is valid. The cell needs to validated according 
to following rules.

1. Each row must contain the digits 1-9 without repetition.
2. Each column must contain the digits 1-9 without repetition.
3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

Your task is help Robin in his task.

Sample test case
case=1
input= 9
3 9 0 7 5 2 0 0 0 
5 0 4 0 0 0 0 7 0
0 0 2 0 8 0 0 9 0
1 8 9 6 0 0 4 5 7
2 0 0 0 1 0 3 8 6
6 0 7 8 0 0 0 1 9
8 0 1 2 0 6 9 4 5
9 5 0 1 0 4 6 0 0
0 0 0 5 9 8 7 3 1
output=true
*/



import java.util.*;

class d48p3 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[][] = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = sc.nextInt();
            }
        }
        sc.close();
        System.out.println(isValidSudoku(arr));
    }

    public static boolean isValidSudoku(int[][] board) {

        for (int i = 0; i < 9; i++) {
            int[] count1 = new int[9];
            int[] count2 = new int[9];
            int[] count3 = new int[9];

            for (int j = 0; j < 9; j++) {
                if (board[i][j] != 0) {
                    count1[board[i][j] - 1]++;

                }
                if (board[j][i] != 0) {
                    count2[board[j][i] - 1]++;
                }
                if (board[j][i] != 0) {
                    count3[(i/3)*3+(j/3)]++;
                }
                

            }
            for (int k = 0; k < 9; k++) {
                if (count1[k] > 1 || count2[k] > 1 || count3[k] > 1) {
                    return false;
                }
            }
        }

        return true;
    }
}